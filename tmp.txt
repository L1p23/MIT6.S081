diff --git a/.vscode/settings.json b/.vscode/settings.json
deleted file mode 100644
index 8a6e9eb..0000000
--- a/.vscode/settings.json
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-    "files.associations": {
-        "user.h": "c",
-        "stat.h": "c"
-    }
-}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index f3e461c..0fbaf7c 100644
--- a/Makefile
+++ b/Makefile
@@ -149,11 +149,6 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-	$U/_sleep\
-	$U/_pingpong\
-	$U/_primes\
-	$U/_find\
-	$U/_xargs\
 
 
 ifeq ($(LAB),syscall)
diff --git a/time.txt b/time.txt
deleted file mode 100644
index 00750ed..0000000
--- a/time.txt
+++ /dev/null
@@ -1 +0,0 @@
-3
diff --git a/user/find.c b/user/find.c
deleted file mode 100644
index ce7bd3d..0000000
--- a/user/find.c
+++ /dev/null
@@ -1,63 +0,0 @@
-#include "kernel/types.h"
-#include "kernel/stat.h"
-#include "user/user.h"
-#include "kernel/fs.h"
-
-char* fmtname(char *path) {
-    char *p;
-
-    for (p = path + strlen(path); p >= path && *p != '/'; --p)
-        ;
-    ++p;
-
-    return p;
-}
-
-void find(char *path, char *filename) {
-    char buf[512], *p;
-    int fd;
-    struct dirent de;
-    struct stat st;
-
-    if ((fd = open(path, 0)) < 0) {
-        fprintf(2, "find: cannot open %s\n", path);
-        return;
-    }
-    if (fstat(fd, &st) < 0) {
-        fprintf(2, "find: cannot stat %s\n", path);
-        return;
-    }
-
-    switch (st.type) {
-        case T_FILE:
-            if (strcmp(fmtname(path), filename) == 0)
-                fprintf(1, "%s\n", path);
-            break;
-        case T_DIR:
-            if (strlen(path) + 1 + DIRSIZ + 1 > 512) {
-                fprintf(2, "find: path too long\n");
-                break;
-            }
-            strcpy(buf, path);
-            p = buf + strlen(buf);
-            *p++ = '/';
-            while (read(fd, &de, sizeof(de)) == sizeof(de)) {
-                if (de.inum == 0 || strcmp(de.name, ".") == 0 || strcmp(de.name, "..") == 0)
-                    continue;
-                memmove(p, de.name, DIRSIZ);
-                p[DIRSIZ] = 0;
-                find(buf, filename);
-            }
-            break;
-    }
-    close(fd);
-}
-
-int main(int argc, char *argv[]) {
-    if (argc == 3) {
-        find(argv[1], argv[2]);
-        exit(0);
-    }
-    fprintf(2, "Usage: find path filename\n");
-    exit(1);
-}
\ No newline at end of file
diff --git a/user/pingpong.c b/user/pingpong.c
deleted file mode 100644
index aed7cd6..0000000
--- a/user/pingpong.c
+++ /dev/null
@@ -1,54 +0,0 @@
-#include "kernel/types.h"
-#include "kernel/stat.h"
-#include "user/user.h"
-
-int main(int argc, char *argv[]) {
-    int p2c[2], c2p[2];
-    char buf = '1';
-    if (pipe(p2c) < 0) {
-        fprintf(2, "pingpong: pipe failed\n");
-        exit(1);
-    }
-    if (pipe(c2p) < 0) {
-        fprintf(2, "pingpong: pipe failed\n");
-        exit(1);
-    }
-    int pid = fork();
-    if (pid == 0) { // child
-        close(c2p[0]);
-        close(p2c[1]);
-        if (read(p2c[0], &buf, 1) < 0) {
-            fprintf(2, "pingpong: pipe read failed\n");
-            exit(1);
-        }
-        fprintf(1, "%d: received ping\n", getpid());
-        if (write(c2p[1], &buf, 1) < 0) {
-            fprintf(2, "pingpong: pipe write failed\n");
-            exit(1);
-        }
-        close(c2p[1]);
-        close(p2c[0]);
-        exit(0);
-    }
-    else if (pid < 0) {
-        fprintf(2, "pingpong: fork failed\n");
-        exit(1);
-    }
-    else {  //parent
-        close(p2c[0]);
-        close(c2p[1]);
-        if (write(p2c[1], &buf, 1) < 0) {
-            fprintf(2, "pingpong: pipe write failed\n");
-            exit(1);
-        }
-        if (read(c2p[0], &buf, 1) < 0) {
-            fprintf(2, "pingpong: pipe read failed\n");
-            exit(1);
-        }
-        fprintf(1, "%d: received pong\n", getpid());
-        wait(0);
-    }
-    close(p2c[1]);
-    close(c2p[0]);
-    exit(0);
-}
\ No newline at end of file
diff --git a/user/primes.c b/user/primes.c
deleted file mode 100644
index 4395cbd..0000000
--- a/user/primes.c
+++ /dev/null
@@ -1,84 +0,0 @@
-#include "kernel/types.h"
-#include "kernel/stat.h"
-#include "user/user.h"
-
-void primes(int readf) {
-    int num;
-    int len = read(readf, &num, 4);
-    if (len == 0)
-        exit(0);
-    else if (len < 0) {
-        fprintf(2, "primes: pipe read failed\n");
-        exit(1);
-    }
-    int div = num;
-    fprintf(1, "prime %d\n", div);
-    int fds[2];
-    if (pipe(fds) < 0) {
-        fprintf(2, "primes: pipe failed\n");
-        exit(1);
-    }
-    int pid = fork();
-    if (pid == 0) {
-        close(fds[1]);
-        primes(fds[0]);
-    }
-    else if (pid < 0) {
-        fprintf(2, "primes: fork failed\n");
-        exit(1);
-    }
-    else {
-        close(fds[0]);
-        len = read(readf, &num, 4);
-        while (len != 0) {
-            if (len < 0) {
-                fprintf(2, "primes: pipe read failed\n");
-                exit(1);
-            }
-            if (num % div == 0) {
-                len = read(readf, &num, 4);
-                continue;
-            }
-            if (write(fds[1], &num, 4) < 0) {
-                fprintf(2, "primes: pipe write failed\n");
-                exit(1);
-            }
-            len = read(readf, &num, 4);
-        }
-        close(fds[1]);
-        wait(0);
-    }
-    exit(0);
-}
-
-int main(int argc, char *argv[]) {
-    int fds[2];
-    if (pipe(fds) < 0) {
-        fprintf(2, "primes: pipe failed\n");
-        exit(1);
-    }
-    int pid = fork();
-    if (pid == 0) {
-        close(fds[1]);
-        primes(fds[0]);
-    }
-    else if (pid < 0) {
-        fprintf(2, "primes: fork failed\n");
-        exit(1);
-    }
-    else {
-        close(fds[0]);
-        fprintf(1, "prime 2\n");
-        for (int i = 3; i <= 35; i++) {
-            if (i % 2 == 0)
-                continue;
-            if (write(fds[1], &i, 4) < 0) {
-                fprintf(2, "primes: pipe write failed\n");
-                exit(1);
-            }
-        }
-        close(fds[1]);
-        wait(0);
-    }
-    exit(0);
-}
\ No newline at end of file
diff --git a/user/sleep.c b/user/sleep.c
deleted file mode 100644
index afdd3d1..0000000
--- a/user/sleep.c
+++ /dev/null
@@ -1,12 +0,0 @@
-#include "kernel/types.h"
-#include "kernel/stat.h"
-#include "user/user.h"
-
-int main(int argc, char *argv[]) {
-    if (argc != 2) {
-        fprintf(2, "Usage: sleep number\n");
-        exit(1);
-    }
-    sleep(atoi(argv[1]));
-    exit(0);
-}
\ No newline at end of file
diff --git a/user/xargs.c b/user/xargs.c
deleted file mode 100644
index 2b1457c..0000000
--- a/user/xargs.c
+++ /dev/null
@@ -1,34 +0,0 @@
-#include "kernel/types.h"
-#include "kernel/stat.h"
-#include "user/user.h"
-
-int main(int argc, char *argv[]) {
-    char buf;
-    char *args[argc];
-    for (int i = 1; i < argc; i++)
-        args[i - 1] = argv[i];
-    args[argc - 1] = (char *)malloc(512);
-    memset(args[argc - 1], 0, 512);
-    int len = 0;
-    while (read(0, &buf, 1) > 0) {
-        if (buf != '\n') {
-            args[argc - 1][len++] = buf;
-            continue;
-        }
-        else
-            args[argc - 1][len] = 0;
-        int pid = fork();
-        if (pid == 0) {
-            exec(argv[1], args);
-        }
-        else if (pid < 0) {
-            fprintf(2, "xargs: fork failed\n");
-            exit(1);
-        }
-        else {
-            wait(0);
-        }
-        len = 0;
-    }
-    exit(1);
-}
\ No newline at end of file
